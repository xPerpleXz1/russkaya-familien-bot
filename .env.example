# ===========================================
# Russkaya Familie Discord Bot v2.0 - Konfiguration
# ===========================================

# Discord Bot Token (ERFORDERLICH)
# Gehe zu: https://discord.com/developers/applications
# Erstelle einen Bot und kopiere den Token hier hin
DISCORD_TOKEN=dein_discord_bot_token_hier

# PostgreSQL Database URL (ERFORDERLICH f√ºr Railway)
# Railway setzt diese automatisch, lokal f√ºr Tests:
# DATABASE_URL=postgresql://username:password@localhost:5432/russkaya_familie

# Channel IDs f√ºr Erinnerungen (ERFORDERLICH)
# Aktiviere Developer Mode in Discord und kopiere die Channel IDs
PLANT_CHANNEL_ID=123456789012345678
SOLAR_CHANNEL_ID=123456789012345678
BACKUP_CHANNEL_ID=123456789012345678
LOGS_CHANNEL_ID=123456789012345678

# Port f√ºr Health Checks (OPTIONAL)
# Railway setzt dies automatisch, Standard: 3000
PORT=3000

# Node Environment (automatisch gesetzt)
NODE_ENV=production

# ===========================================
# RAILWAY DEPLOYMENT SETUP
# ===========================================

# 1. RAILWAY ACCOUNT ERSTELLEN:
#    - Gehe zu: https://railway.app
#    - Registriere dich mit GitHub

# 2. NEUES PROJEKT ERSTELLEN:
#    - "New Project" -> "Deploy from GitHub repo"
#    - W√§hle dein Repository

# 3. POSTGRESQL HINZUF√úGEN:
#    - Im Dashboard: "New" -> "Database" -> "PostgreSQL"
#    - Railway setzt DATABASE_URL automatisch

# 4. ENVIRONMENT VARIABLES SETZEN:
#    - Im Railway Dashboard -> Variables Tab
#    - Setze: DISCORD_TOKEN, PLANT_CHANNEL_ID, SOLAR_CHANNEL_ID, BACKUP_CHANNEL_ID
#    - PORT wird automatisch gesetzt

# 5. DEPLOYMENT:
#    - Railway deployed automatisch bei Git Push
#    - Health Check: https://your-app.railway.app

# ===========================================
# LOKALE ENTWICKLUNG
# ===========================================

# F√ºr lokale Tests ohne PostgreSQL:
# Der Bot verwendet automatisch SQLite als Fallback

# Setup-Schritte:
# 1. npm install
# 2. Kopiere .env.example zu .env
# 3. Setze DISCORD_TOKEN und Channel IDs
# 4. npm run dev

# ===========================================
# DISCORD BOT SETUP
# ===========================================

# 1. BOT ERSTELLEN:
#    - https://discord.com/developers/applications
#    - "New Application" -> Gib einen Namen ein
#    - Linke Seite -> "Bot"
#    - "Add Bot" -> Kopiere den Token

# 2. BOT PERMISSIONS:
#    - OAuth2 -> URL Generator
#    - Scopes: "bot", "applications.commands"
#    - Bot Permissions: 
#      * Send Messages
#      * Use Slash Commands
#      * Embed Links
#      * Attach Files
#      * Read Message History
#      * Add Reactions
#      * Use External Emojis

# 3. BOT EINLADEN:
#    - Generierte URL kopieren und Bot zu Server einladen

# ===========================================
# CHANNEL IDS FINDEN
# ===========================================

# 1. Discord -> Benutzereinstellungen -> Erweitert -> Entwicklermodus aktivieren
# 2. Rechtsklick auf Channel -> "ID kopieren"
# 3. Hier in die entsprechenden Variablen einf√ºgen

# EMPFOHLENE CHANNEL-STRUKTUR:
# - #üå±-pflanzen -> PLANT_CHANNEL_ID
# - #‚òÄÔ∏è-solar -> SOLAR_CHANNEL_ID  
# - #üíæ-backups -> BACKUP_CHANNEL_ID
# - #üìã-logs -> LOGS_CHANNEL_ID

# ===========================================
# FEHLERBEHEBUNG
# ===========================================

# Bot startet nicht?
# - √úberpr√ºfe DISCORD_TOKEN
# - √úberpr√ºfe Node.js Version (>=18.0.0)
# - √úberpr√ºfe npm install

# Database Fehler?
# - PostgreSQL: √úberpr√ºfe DATABASE_URL
# - Lokal: SQLite wird automatisch verwendet

# Commands funktionieren nicht?
# - Bot muss Slash Command Permissions haben
# - Bot muss auf Server eingeladen sein
# - Warte 1 Stunde nach Command Registration

# Railway Deployment Probleme?
# - √úberpr√ºfe Build Logs im Dashboard
# - √úberpr√ºfe Environment Variables
# - Health Check URL testen

# ===========================================
# PRODUCTION TIPPS
# ===========================================

# Performance:
# - PostgreSQL Connection Pooling ist aktiviert
# - Automatische Datenbank-Bereinigung
# - Background Tasks f√ºr Statistiken

# Monitoring:
# - Health Check Endpoint verf√ºgbar
# - Automatische Backups
# - Error Logging in Console

# Skalierung:
# - Stateless Design - kann horizontal skaliert werden
# - Alle Daten in PostgreSQL
# - Railway Auto-Scaling unterst√ºtzt

# Sicherheit:
# - Keine Secrets im Code
# - Environment Variables f√ºr Konfiguration
# - Input Validation bei allen Commands

# ===========================================
# WICHTIGE HINWEISE
# ===========================================

# ‚ö†Ô∏è SICHERHEIT:
# - Teile NIEMALS deinen Discord Token √∂ffentlich!
# - F√ºge .env zur .gitignore hinzu
# - Bei Railway werden Environment Variables sicher gespeichert

# üöÄ ERSTE SCHRITTE:
# 1. Repository forken
# 2. Railway Account erstellen
# 3. Projekt von GitHub deployen
# 4. PostgreSQL Database hinzuf√ºgen
# 5. Environment Variables setzen
# 6. Discord Bot erstellen und einladen
# 7. Channel IDs setzen
# 8. Deployment starten!

# üìû SUPPORT:
# - GitHub Issues f√ºr Bugs
# - Discord Server f√ºr Hilfe
# - Wiki f√ºr ausf√ºhrliche Dokumentation

# ===========================================
